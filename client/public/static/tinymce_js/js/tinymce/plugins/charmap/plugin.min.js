/**
 * Copyright (c) Tiny Technologies, Inc. All rights reserved.
 * Licensed under the LGPL or a commercial license.
 * For LGPL see License.txt in the project root for license information.
 * For commercial licenses see https://www.tiny.cloud/
 *
 * Version: 5.10.0 (2021-10-11)
 */
(function () {
    'use strict';

    var global$2 = tinymce.util.Tools.resolve('tinymce.PluginManager');

    var fireInsertCustomChar = function (editor, chr) {
      return editor.fire('insertCustomChar', { chr: chr });
    };

    var insertChar = function (editor, chr) {
      var evtChr = fireInsertCustomChar(editor, chr).chr;
      editor.execCommand('mceInsertContent', false, evtChr);
    };

    var typeOf = function (x) {
      var t = typeof x;
      if (x === null) {
        return 'null';
      } else if (t === 'object' && (Array.prototype.isPrototypeOf(x) || x.constructor && x.constructor.name === 'Array')) {
        return 'array';
      } else if (t === 'object' && (String.prototype.isPrototypeOf(x) || x.constructor && x.constructor.name === 'String')) {
        return 'string';
      } else {
        return t;
      }
    };
    var isType = function (type) {
      return function (value) {
        return typeOf(value) === type;
      };
    };
    var eq = function (t) {
      return function (a) {
        return t === a;
      };
    };
    var isArray$1 = isType('array');
    var isNull = eq(null);

    var noop = function () {
    };
    var constant = function (value) {
      return function () {
        return value;
      };
    };
    var identity = function (x) {
      return x;
    };
    var never = constant(false);
    var always = constant(true);

    var none = function () {
      return NONE;
    };
    var NONE = function () {
      var call = function (thunk) {
        return thunk();
      };
      var id = identity;
      var me = {
        fold: function (n, _s) {
          return n();
        },
        isSome: never,
        isNone: always,
        getOr: id,
        getOrThunk: call,
        getOrDie: function (msg) {
          throw new Error(msg || 'error: getOrDie called on none.');
        },
        getOrNull: constant(null),
        getOrUndefined: constant(undefined),
        or: id,
        orThunk: call,
        map: none,
        each: noop,
        bind: none,
        exists: never,
        forall: always,
        filter: function () {
          return none();
        },
        toArray: function () {
          return [];
        },
        toString: constant('none()')
      };
      return me;
    }();
    var some = function (a) {
      var constant_a = constant(a);
      var self = function () {
        return me;
      };
      var bind = function (f) {
        return f(a);
      };
      var me = {
        fold: function (n, s) {
          return s(a);
        },
        isSome: always,
        isNone: never,
        getOr: constant_a,
        getOrThunk: constant_a,
        getOrDie: constant_a,
        getOrNull: constant_a,
        getOrUndefined: constant_a,
        or: self,
        orThunk: self,
        map: function (f) {
          return some(f(a));
        },
        each: function (f) {
          f(a);
        },
        bind: bind,
        exists: bind,
        forall: bind,
        filter: function (f) {
          return f(a) ? me : NONE;
        },
        toArray: function () {
          return [a];
        },
        toString: function () {
          return 'some(' + a + ')';
        }
      };
      return me;
    };
    var from = function (value) {
      return value === null || value === undefined ? NONE : some(value);
    };
    var Optional = {
      some: some,
      none: none,
      from: from
    };

    var nativePush = Array.prototype.push;
    var map = function (xs, f) {
      var len = xs.length;
      var r = new Array(len);
      for (var i = 0; i < len; i++) {
        var x = xs[i];
        r[i] = f(x, i);
      }
      return r;
    };
    var each = function (xs, f) {
      for (var i = 0, len = xs.length; i < len; i++) {
        var x = xs[i];
        f(x, i);
      }
    };
    var findUntil = function (xs, pred, until) {
      for (var i = 0, len = xs.length; i < len; i++) {
        var x = xs[i];
        if (pred(x, i)) {
          return Optional.some(x);
        } else if (until(x, i)) {
          break;
        }
      }
      return Optional.none();
    };
    var find = function (xs, pred) {
      return findUntil(xs, pred, never);
    };
    var flatten = function (xs) {
      var r = [];
      for (var i = 0, len = xs.length; i < len; ++i) {
        if (!isArray$1(xs[i])) {
          throw new Error('Arr.flatten item ' + i + ' was not an array, input: ' + xs);
        }
        nativePush.apply(r, xs[i]);
      }
      return r;
    };
    var bind = function (xs, f) {
      return flatten(map(xs, f));
    };

    var global$1 = tinymce.util.Tools.resolve('tinymce.util.Tools');

    var getCharMap$1 = function (editor) {
      return editor.getParam('charmap');
    };
    var getCharMapAppend = function (editor) {
      return editor.getParam('charmap_append');
    };

    var isArray = global$1.isArray;
    var UserDefined = 'User Defined';
    var getDefaultCharMap = function () {
      return [
        {
          name: '원문자',
          characters: [
            [
              9312,
              '원문자 1'
            ],
            [
              9313,
              '원문자 2'
            ],
            [
              9314,
              '원문자 3'
            ],
            [
              9315,
              '원문자 4'
            ],
            [
              9316,
              '원문자 5'
            ],
            [
              9317,
              '원문자 6'
            ],
            [
              9318,
              '원문자 7'
            ],
            [
              9319,
              '원문자 8'
            ],
            [
              9320,
              '원문자 9'
            ],
            [
              9321,
              '원문자 10'
            ],
            [
              9322,
              '원문자 11'
            ],
            [
              9323,
              '원문자 12'
            ],
            [
              9324,
              '원문자 13'
            ],
            [
              9325,
              '원문자 14'
            ],
            [
              9326,
              '원문자 15'
            ],
            [
              9327,
              '원문자 16'
            ],
            [
              9328,
              '원문자 17'
            ],
            [
              9329,
              '원문자 18'
            ],
            [
              12896,
              '원문자 ㄱ'
            ],
            [
              12897,
              '원문자 ㄴ'
            ],
            [
              12898,
              '원문자 ㄷ'
            ],
            [
              12899,
              '원문자 ㄹ'
            ],
            [
              12900,
              '원문자 ㅁ'
            ],
            [
              12901,
              '원문자 ㅂ'
            ],
            [
              12902,
              '원문자 ㅅ'
            ],
            [
              12903,
              '원문자 ㅇ'
            ],
            [
              12904,
              '원문자 ㅈ'
            ],
            [
              12905,
              '원문자 ㅊ'
            ],
            [
              12906,
              '원문자 ㅋ'
            ],
            [
              12907,
              '원문자 ㅌ'
            ],
            [
              12908,
              '원문자 ㅍ'
            ],
            [
              12909,
              '원문자 ㅎ'
            ],
            [
              12910,
              '원문자 가'
            ],
            [
              12911,
              '원문자 나'
            ],
            [
              12912,
              '원문자 다'
            ],
            [
              12913,
              '원문자 라'
            ],
            [
              12914,
              '원문자 마'
            ],
            [
              12915,
              '원문자 바'
            ],
            [
              9424,
              '원문자 a'
            ],
            [
              9425,
              '원문자 b'
            ],
            [
              9426,
              '원문자 c'
            ],
            [
              9427,
              '원문자 d'
            ],
            [
              9428,
              '원문자 e'
            ],
            [
              9429,
              '원문자 f'
            ],
            [
              9430,
              '원문자 g'
            ],
            [
              9431,
              '원문자 h'
            ],
            [
              9432,
              '원문자 i'
            ],
            [
              9433,
              '원문자 j'
            ],
            [
              9434,
              '원문자 k'
            ],
            [
              9435,
              '원문자 l'
            ],
            [
              9436,
              '원문자 m'
            ],
            [
              9437,
              '원문자 n'
            ],
            [
              9438,
              '원문자 o'
            ],
            [
              9439,
              '원문자 p'
            ],
            [
              9440,
              '원문자 q'
            ],
            [
              9441,
              '원문자 r'
            ],
            [
              9442,
              '원문자 s'
            ],
            [
              9443,
              '원문자 t'
            ],
            [
              9444,
              '원문자 u'
            ],
            [
              9445,
              '원문자 w'
            ],
            [
              9446,
              '원문자 x'
            ],
            [
              9447,
              '원문자 y'
            ],
            [
              9448,
              '원문자 z'
            ],
            [
              9398,
              '원문자 Ⓐ'
            ],
            [
              9399,
              '원문자 Ⓑ'
            ],
            [
              9400,
              '원문자 Ⓒ'
            ],
            [
              9401,
              '원문자 Ⓓ'
            ],
            [
              9402,
              '원문자 Ⓔ'
            ],
            [
              9403,
              '원문자 Ⓕ'
            ],
            [
              9404,
              '원문자 Ⓖ'
            ],
            [
              9405,
              '원문자 Ⓗ'
            ],
            [
              9406,
              '원문자 Ⓘ'
            ],
            [
              9407,
              '원문자 Ⓙ'
            ],
            [
              9408,
              '원문자 Ⓚ'
            ],
            [
              9409,
              '원문자 Ⓛ'
            ],
            [
              9410,
              '원문자 Ⓜ︎'
            ],
            [
              9411,
              '원문자 Ⓝ'
            ],
            [
              9412,
              '원문자 Ⓞ'
            ],
            [
              9413,
              '원문자 Ⓟ'
            ],
            [
              9414,
              '원문자 Ⓠ'
            ],
            [
              9415,
              '원문자 Ⓡ'
            ],
            [
              9416,
              '원문자 Ⓢ'
            ],
            [
              9417,
              '원문자 Ⓣ'
            ],
            [
              9418,
              '원문자 Ⓤ'
            ],
            [
              9419,
              '원문자 Ⓥ'
            ],
            [
              9420,
              '원문자 Ⓦ'
            ],
            [
              9421,
              '원문자 Ⓧ'
            ],
            [
              9422,
              '원문자 Ⓨ'
            ],
            [
              9423,
              '원문자 Ⓩ'
            ]            
          ]
        },
        {
          name: 'Arrows',
          characters: [
            [
              8592,
              'leftwards arrow'
            ],
            [
              8593,
              'upwards arrow'
            ],
            [
              8594,
              'rightwards arrow'
            ],
            [
              8595,
              'downwards arrow'
            ],
            [
              8596,
              'left right arrow'
            ],
            [
              8629,
              'carriage return'
            ],
            [
              8656,
              'leftwards double arrow'
            ],
            [
              8657,
              'upwards double arrow'
            ],
            [
              8658,
              'rightwards double arrow'
            ],
            [
              8659,
              'downwards double arrow'
            ],
            [
              8660,
              'left right double arrow'
            ]
          ]
        },
        {
          name: '고어',
          characters: [
            [
              12671,
              'ㅿ'
            ],
            [
                12673,
                "ㆁ"
            ],
            [
                12678,
                "ㆆ"
            ],
            [
                12685,
                "ㆍ"
            ],
            [
                4423,
                "ᅇ"
            ],
            [
                12677,
                "ㆅ"
            ],
            [
                43388,
                "ꥼ"
            ],
             [
                12658,
                "ㅲ"
            ],
            [
                4384,
                "ᄠ"
            ],
            [
                12612,
                "ㅄ"
            ],
            [
                12662,
                "ㅶ"
            ],
            [
                4393,
                "ᄩ"
            ],
            [
                12666,
                "ㅺ"
            ],
            [
                12668,
                "ㅼ"
            ],
            [
                12669,
                "ㅽ"
            ],
            [
                12670,
                "ㅾ"
            ],
            [
                12660,
                "ㅴ"
            ],
            [
                12661,
                "ㅵ"
            ],
            [
                4388,
                "ᄤ"
            ],
            [
                4389,
                "ᄥ"
            ],
            [
                4390,
                "ᄦ"
            ],
             [
                4379,
                "ᄛ"
            ],
            [
                12676,
                "ㆄ"
            ],
            [
                12664,
                "ㅸ"
            ],
            [
                12665,
                "ㅹ"
            ],
            [
                12657,
                "ㅱ"
            ],
            [
                4561,
                "ᇑ"
            ],
            [
                12653,
                "ㅭ"
            ],
            [
                4570,
                "ᇚ"
            ],
            [
                12681,
                "ㆉ"
            ],
            [
                12684,
                "ㆌ"
            ],
            [
                4508,
                "ᆜ"
            ],
            [
                4509,
                "ᆝ(ᆢ)"
            ],
            [
                12686,
                "ㆎ"
            ]
         ]
        },
        {
          name: '로마자',
          characters: [
            [
              8544,
              'Ⅰ'
            ],
            [
                8545,
                "Ⅱ"
            ],
            [
                8546,
                "Ⅲ"
            ],
            [
                8547,
                "Ⅳ"
            ],
            [
                8548,
                "Ⅴ"
            ],
            [
                8549,
                "Ⅵ"
            ],
            [
                8550,
                "Ⅶ"
            ],
             [
                8551,
                "Ⅷ"
            ],
            [
                8552,
                "Ⅸ"
            ],
            [
                8553,
                "Ⅹ"
            ],
            [
                8560,
                "ⅰ"
            ],
            [
                8561,
                "ⅱ"
            ],
            [
                8562,
                "ⅲ"
            ],
            [
                8563,
                "ⅳ"
            ],
            [
                8564,
                "ⅴ"
            ],
            [
                8565,
                "ⅵ"
            ],
            [
                8566,
                "ⅶ"
            ],
            [
                8567,
                "ⅷ"
            ],
            [
                8568,
                "ⅸ"
            ],
            [
                8569,
                "ⅹ"
            ]
         ]
        },
        {
          name: '본문용⓵',
          characters: [
            [
              9461,
              '⓵'
            ],
            [
                9462,
                "⓶"
            ],
            [
                9463,
                "⓷"
            ],
            [
                9464,
                "⓸"
            ],
            [
                9465,
                "⓹"
            ],
            [
                9466,
                "⓺"
            ],
            [
                9467,
                "⓻"
            ],
             [
                9468,
                "⓼"
            ],
            [
                9469,
                "⓽"
            ],
            [
                9470,
                "⓾"
            ]
         ]
        },
        {
          name: '기타',
          characters: [
            [
              9702,
              'WHITE BULLET'
            ],
            [
                8226,
                "BULLET"
            ],
            [
                8251,
                "REFERENCE MARK"
            ],
            [
                9744,
                "BALLOT BOX"
            ],
            [
                9651,
                "WHITE UP-POINTING TRIANGLE"
            ],
            [
                9650,
                "BLACK UP-POINTING TRIANGLE"
            ],
            [
                12300,
                "Left Corner Bracket"
            ],
             [
                12301,
                "Right Corner Bracket"
            ],
            [
                8220,
                "Left Double Quotation Mark"
            ],
            [
                8221,
                "Right Double Quotation Mark"
            ],
            [
                8216,
                "Left Single Quotation Mark"
            ],
            [
                8217,
                "Right Single Quotation Mark"
            ],
            [
              9674,
              'lozenge'
            ],
            [
              9824,
              'black spade suit'
            ],
            [
              9827,
              'black club suit'
            ],
            [
              9829,
              'black heart suit'
            ],
            [
              9830,
              'black diamond suit'
            ],
            [
              9678,
              'Bullseye'
            ],
            [
              9632,
              'Black Square'
            ],
            [
              9654,
              'Black Right-Pointing Triangle'
            ],
            [
              9635,
              'White Square Containing Black Small Square'
            ],
            [
              9758,
              'White Right Pointing'
            ],
            [
              8230,
              'Horizontal Ellipsis'
            ],
            [
              183,
              'Middle Dot'
            ],
            [
              36,
              'Dollar Sign'
            ],
            [
              176,
              '각도 심볼'
            ],
            [
              9675,
              'White Circle'
            ],
            [
              8486,
              'Ohm Sign'
            ],
            [
              8487,
              'Inverted Ohm Sign'
            ],
            [
              12298,
              'Left Double Angle Bracket'
            ],
            [
              12299,
              'Right Double Angle Bracket'
            ],
            [
              12302,
              'Left White Corner Bracket'
            ],
            [
              12303,
              'Right White Corner Bracket'
            ],
            [
              9734,
              'White Star'
            ],
            [
              9733,
              'Black Star'
            ],
            [
              9670,
              'Black Diamond'
            ],
            [
              9672,
              'White Diamond Containing Black Small Diamond'
            ]
         ]
        }
      ];
    };
    var charmapFilter = function (charmap) {
      return global$1.grep(charmap, function (item) {
        return isArray(item) && item.length === 2;
      });
    };
    var getCharsFromSetting = function (settingValue) {
      if (isArray(settingValue)) {
        return charmapFilter(settingValue);
      }
      if (typeof settingValue === 'function') {
        return settingValue();
      }
      return [];
    };
    var extendCharMap = function (editor, charmap) {
      var userCharMap = getCharMap$1(editor);
      if (userCharMap) {
        charmap = [{
            name: UserDefined,
            characters: getCharsFromSetting(userCharMap)
          }];
      }
      var userCharMapAppend = getCharMapAppend(editor);
      if (userCharMapAppend) {
        var userDefinedGroup = global$1.grep(charmap, function (cg) {
          return cg.name === UserDefined;
        });
        if (userDefinedGroup.length) {
          userDefinedGroup[0].characters = [].concat(userDefinedGroup[0].characters).concat(getCharsFromSetting(userCharMapAppend));
          return charmap;
        }
        return charmap.concat({
          name: UserDefined,
          characters: getCharsFromSetting(userCharMapAppend)
        });
      }
      return charmap;
    };
    var getCharMap = function (editor) {
      var groups = extendCharMap(editor, getDefaultCharMap());
      return groups.length > 1 ? [{
          name: 'All',
          characters: bind(groups, function (g) {
            return g.characters;
          })
        }].concat(groups) : groups;
    };

    var get = function (editor) {
      var getCharMap$1 = function () {
        return getCharMap(editor);
      };
      var insertChar$1 = function (chr) {
        insertChar(editor, chr);
      };
      return {
        getCharMap: getCharMap$1,
        insertChar: insertChar$1
      };
    };

    var Cell = function (initial) {
      var value = initial;
      var get = function () {
        return value;
      };
      var set = function (v) {
        value = v;
      };
      return {
        get: get,
        set: set
      };
    };

    var last = function (fn, rate) {
      var timer = null;
      var cancel = function () {
        if (!isNull(timer)) {
          clearTimeout(timer);
          timer = null;
        }
      };
      var throttle = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        cancel();
        timer = setTimeout(function () {
          timer = null;
          fn.apply(null, args);
        }, rate);
      };
      return {
        cancel: cancel,
        throttle: throttle
      };
    };

    var nativeFromCodePoint = String.fromCodePoint;
    var contains = function (str, substr) {
      return str.indexOf(substr) !== -1;
    };
    var fromCodePoint = function () {
      var codePoints = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        codePoints[_i] = arguments[_i];
      }
      if (nativeFromCodePoint) {
        return nativeFromCodePoint.apply(void 0, codePoints);
      } else {
        var codeUnits = [];
        var codeLen = 0;
        var result = '';
        for (var index = 0, len = codePoints.length; index !== len; ++index) {
          var codePoint = +codePoints[index];
          if (!(codePoint < 1114111 && codePoint >>> 0 === codePoint)) {
            throw RangeError('Invalid code point: ' + codePoint);
          }
          if (codePoint <= 65535) {
            codeLen = codeUnits.push(codePoint);
          } else {
            codePoint -= 65536;
            codeLen = codeUnits.push((codePoint >> 10) + 55296, codePoint % 1024 + 56320);
          }
          if (codeLen >= 16383) {
            result += String.fromCharCode.apply(null, codeUnits);
            codeUnits.length = 0;
          }
        }
        return result + String.fromCharCode.apply(null, codeUnits);
      }
    };

    var charMatches = function (charCode, name, lowerCasePattern) {
      if (contains(fromCodePoint(charCode).toLowerCase(), lowerCasePattern)) {
        return true;
      } else {
        return contains(name.toLowerCase(), lowerCasePattern) || contains(name.toLowerCase().replace(/\s+/g, ''), lowerCasePattern);
      }
    };
    var scan = function (group, pattern) {
      var matches = [];
      var lowerCasePattern = pattern.toLowerCase();
      each(group.characters, function (g) {
        if (charMatches(g[0], g[1], lowerCasePattern)) {
          matches.push(g);
        }
      });
      return map(matches, function (m) {
        return {
          text: m[1],
          value: fromCodePoint(m[0]),
          icon: fromCodePoint(m[0])
        };
      });
    };

    var patternName = 'pattern';
    var open = function (editor, charMap) {
      var makeGroupItems = function () {
        return [
          {
            label: 'Search',
            type: 'input',
            name: patternName
          },
          {
            type: 'collection',
            name: 'results'
          }
        ];
      };
      var makeTabs = function () {
        return map(charMap, function (charGroup) {
          return {
            title: charGroup.name,
            name: charGroup.name,
            items: makeGroupItems()
          };
        });
      };
      var makePanel = function () {
        return {
          type: 'panel',
          items: makeGroupItems()
        };
      };
      var makeTabPanel = function () {
        return {
          type: 'tabpanel',
          tabs: makeTabs()
        };
      };
      var currentTab = charMap.length === 1 ? Cell(UserDefined) : Cell('All');
      var scanAndSet = function (dialogApi, pattern) {
        find(charMap, function (group) {
          return group.name === currentTab.get();
        }).each(function (f) {
          var items = scan(f, pattern);
          dialogApi.setData({ results: items });
        });
      };
      var SEARCH_DELAY = 40;
      var updateFilter = last(function (dialogApi) {
        var pattern = dialogApi.getData().pattern;
        scanAndSet(dialogApi, pattern);
      }, SEARCH_DELAY);
      var body = charMap.length === 1 ? makePanel() : makeTabPanel();
      var initialData = {
        pattern: '',
        results: scan(charMap[0], '')
      };
      var bridgeSpec = {
        title: 'Special Character',
        size: 'normal',
        body: body,
        buttons: [{
            type: 'cancel',
            name: 'close',
            text: 'Close',
            primary: true
          }],
        initialData: initialData,
        onAction: function (api, details) {
          if (details.name === 'results') {
            insertChar(editor, details.value);
            api.close();
          }
        },
        onTabChange: function (dialogApi, details) {
          currentTab.set(details.newTabName);
          updateFilter.throttle(dialogApi);
        },
        onChange: function (dialogApi, changeData) {
          if (changeData.name === patternName) {
            updateFilter.throttle(dialogApi);
          }
        }
      };
      var dialogApi = editor.windowManager.open(bridgeSpec);
      dialogApi.focus(patternName);
    };

    var register$1 = function (editor, charMap) {
      editor.addCommand('mceShowCharmap', function () {
        open(editor, charMap);
      });
    };

    var global = tinymce.util.Tools.resolve('tinymce.util.Promise');

    var init = function (editor, all) {
      editor.ui.registry.addAutocompleter('charmap', {
        ch: ':',
        columns: 'auto',
        minChars: 2,
        fetch: function (pattern, _maxResults) {
          return new global(function (resolve, _reject) {
            resolve(scan(all, pattern));
          });
        },
        onAction: function (autocompleteApi, rng, value) {
          editor.selection.setRng(rng);
          editor.insertContent(value);
          autocompleteApi.hide();
        }
      });
    };

    var register = function (editor) {
      editor.ui.registry.addButton('charmap', {
        icon: 'insert-character',
        tooltip: 'Special character',
        onAction: function () {
          return editor.execCommand('mceShowCharmap');
        }
      });
      editor.ui.registry.addMenuItem('charmap', {
        icon: 'insert-character',
        text: 'Special character...',
        onAction: function () {
          return editor.execCommand('mceShowCharmap');
        }
      });
    };

    function Plugin () {
      global$2.add('charmap', function (editor) {
        var charMap = getCharMap(editor);
        register$1(editor, charMap);
        register(editor);
        init(editor, charMap[0]);
        return get(editor);
      });
    }

    Plugin();

}());
