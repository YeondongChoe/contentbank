import React, { Component } from 'react';

declare type RowMetadata = {
    depth: number;
    index: number;
    height: number;
    hasChildren: boolean;
};
declare type RowState = {
    isVisible: boolean;
    isExpanded: boolean;
    top: number;
};
declare class RowModel<T> {
    static DEFAULT_HEIGHT: number;
    readonly data: T;
    readonly metadata: RowMetadata;
    readonly $state: RowState;
    constructor(data: T, metadata: RowMetadata, state: RowState);
}
interface RowAPI<T> {
    toggleChildren: () => void;
    updateData: (newData: T) => void;
}
declare class Row<T> extends RowModel<T> implements RowAPI<T> {
    toggleChildren: () => void;
    updateData: (newData: T) => void;
    constructor(model: RowModel<T>, api: RowAPI<T>);
}

declare type ColumnProps<TData> = {
    renderCell: (row: Row<TData>) => React.ReactNode;
    renderHeaderCell: () => React.ReactNode;
    grow?: number;
    basis?: string;
};
declare class Column<TData> extends Component<ColumnProps<TData>, {}> {
    static displayName: string;
    render(): null;
}

interface TreeNode<T> {
    data: T;
    children?: Array<TreeNode<T>>;
    height?: number;
}
declare class TreeState<T> {
    readonly data: ReadonlyArray<RowModel<T>>;
    readonly height: number;
    readonly hasData: boolean;
    protected constructor(data: ReadonlyArray<RowModel<T>>);
    static create<TData>(data: Array<TreeNode<TData>>): Readonly<TreeState<TData>>;
    static createEmpty<TData>(): Readonly<TreeState<TData>>;
    static sliceRows<TData>(source: Readonly<TreeState<TData>>, from: number, to: number): ReadonlyArray<RowModel<TData>>;
    private static _hideRowsInRange;
    private static _showRowsInRange;
    static expandAll<TData>(source: Readonly<TreeState<TData>>, depthLimit?: number): Readonly<TreeState<TData>>;
    static collapseAll<TData>(source: Readonly<TreeState<TData>>): Readonly<TreeState<TData>>;
    static expandAncestors<TData>(source: Readonly<TreeState<TData>>, model: RowModel<TData>): Readonly<TreeState<TData>>;
    static toggleChildren<TData>(source: Readonly<TreeState<TData>>, model: RowModel<TData>): Readonly<TreeState<TData>>;
    static updateData<TData>(source: Readonly<TreeState<TData>>, model: RowModel<TData>, newData: TData): Readonly<TreeState<TData>>;
    findRowModel(node: TreeNode<T>): RowModel<T> | undefined;
    indexAtYPos(yPos: number): number;
    yPosAtIndex(index: number): number;
}

declare type TreeTableProps<TData> = {
    value: Readonly<TreeState<TData>>;
    onChange?: (value: Readonly<TreeState<TData>>) => void;
    children?: Array<React.ReactElement<Column<TData>>> | React.ReactElement<Column<TData>>;
    onScroll?: (scrollTop: number) => void;
    height?: number;
    headerHeight?: number;
    className?: string;
};
declare class TreeTable<TData> extends Component<TreeTableProps<TData>, {}> {
    static Column: typeof Column;
    private vListRef;
    render(): JSX.Element;
    private handleChange;
    scrollTo(posY: number): void;
}

export { Row, RowModel, TreeNode, TreeState, TreeTable };
